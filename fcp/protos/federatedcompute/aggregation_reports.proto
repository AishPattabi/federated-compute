// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.internal.federatedcompute.v1;

import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/rpc/code.proto";
import "fcp/protos/federatedcompute/common.proto";

option java_package = "com.google.internal.federatedcompute.v1";
option java_multiple_files = true;

service AggregationReports {
  // A request sent by the client after completing local (on-device) task
  // execution to notify the server that it has Aggregation data to upload. The
  // server responds with the location at which to upload the data. If a
  // client's result is no longer needed (e.g. the reporting goal was already
  // reached for the task), the server will respond with an ABORTED error.
  rpc StartAggregationDataUpload(StartAggregationDataUploadRequest)
      returns (StartAggregationDataUploadResponse) {
    option (google.api.http) = {
      post: "/v1/populations/{population_name}/aggregationreports/{client_session_id}:startdataupload"
      body: "*"
    };
  }

  // A request sent by the client indicating the completion of the Federated
  // Compute session. The client provides the task execution outcome and stats.
  // This may be sent after aggregation data upload if the task execution
  // succeeded, or without uploading any aggregation data if the task execution
  // was interrupted or encountered an error. If a client's result was not
  // needed for the aggregation (e.g. the reporting goal was already reached for
  // the task), the server will respond with an ABORTED error.
  rpc SubmitAggregationReport(SubmitAggregationReportRequest)
      returns (SubmitAggregationReportResponse) {
    option (google.api.http) = {
      post: "/v1/populations/{population_name}/aggregationreports/{client_session_id}:submit"
      body: "*"
    };
  }
}

message StartAggregationDataUploadRequest {
  // The name of the population this client belongs to.
  //
  // Note that HTTP clients set this value in the request URL instead of the
  // request body.
  string population_name = 1
      ;

  // The client session id returned by the server in previous protocol
  // responses.
  //
  // Note that HTTP clients set this value in the request URL instead of the
  // request body.
  string client_session_id = 2
      ;

  // The id of the aggregation session this client participates in. This value
  // is returned by the server when the client is assigned a task.
  string aggregation_session_id = 3
      ;
}

message StartAggregationDataUploadResponse {
  // Information to construct the URI to use for uploading the aggregation
  // result.
  ForwardingInfo aggregation_upload_forwarding_info = 1;

  // Resource name to which the aggregation result should be uploaded.
  // Clients should use this field as well as the
  // `ForwardingInfo.target_uri_prefix` to create the upload URL:
  // {target_uri_prefix}/upload/v1/media/{resource_name}.
  string resource_name = 2;
}

message SubmitAggregationReportRequest {
  // The name of the population this client belongs to.
  //
  // Note that HTTP clients set this value in the request URL instead of the
  // request body.
  string population_name = 1
      ;

  // The client session id returned by the server in previous protocol
  // responses.
  //
  // Note that HTTP clients set this value in the request URL instead of the
  // request body.
  string client_session_id = 2
      ;

  // The id of the aggregation session this client participates in. This value
  // is returned by the server when the client is assigned a task.
  string aggregation_session_id = 3
      ;

  // A report with results of local (on-device) task execution.
  AggregationReport aggregation_report = 4;
}

message SubmitAggregationReportResponse {}

message AggregationReport {
  // Status code reported by client.
  // Code.OK indicates that client execution completed successfully and produced
  // report. Any other code indicates unsuccessful execution and execution stats
  // may contain detailed diagnostic information.
  google.rpc.Code status_code = 1;

  // Stats produced during the client-side execution of the task.
  ClientStats client_stats = 2;

  // Resource name to which the aggregation result was uploaded. This will be
  // empty if no result was uploaded.
  string resource_name = 3;
}

// This message is used to report client stats and execution duration to the
// server.
message ClientStats {
  // The time spent on running the task (includes I/O such as reading examples,
  // but does not include time spent on the network for retrieving the task
  // or uploading results).
  google.protobuf.Duration execution_duration = 1;
}
