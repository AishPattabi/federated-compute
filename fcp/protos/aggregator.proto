/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package google.internal.federatedml.v2;

import "fcp/protos/federated_api.proto";

option java_package = "com.google.internal.federatedml.v2";
option java_multiple_files = true;
option java_outer_classname = "AggregatorMessages";

// Provides summary about aggregation progress.
message AggregatorStatusUpdate {
  // Number of client inputs aggregated and guaranteed to be available from
  // this Aggregator.  Returns 0 if the protocol might still be unsuccessful
  // due to client actions, but assumes that no catastrophic errors occur,
  // such as the server terminating exceptionally.
  int32 num_client_inputs_aggregated = 7;

  // The below buckets are mutually exclusive and exhaustive, such that
  // it should always be the case that:
  //    #clients =   num_clients_pending_before_reporting
  //               + num_clients_failed_before_reporting
  //               + num_clients_reported_and_pending
  //               + num_clients_reported_and_completed
  //               + num_clients_reported_and_completion_not_needed
  //               + num_clients_reported_and_failed

  // Number of clients that have not yet reported, but still might.
  int32 num_clients_pending_before_reporting = 1;

  // Number of clients that failed before sending their inputs.
  int32 num_clients_failed_before_reporting = 3;

  // Number of clients that have reported and still might complete the
  // protocol.
  int32 num_clients_reported_and_pending = 4;

  // Number of clients that sent their input and completed the aggregation
  // protocol.
  int32 num_clients_reported_and_completed = 2;

  // Number of clients that sent their input, then were disconnected
  // gracefully by the server (because a sufficient number of clients had
  // completed the protocol, or because the protocol as a whole had failed.)
  int32 num_clients_reported_and_completion_not_needed = 5;

  // Number of clients that sent their input, but failed before completing
  // the protocol or being gracefully disconnected by the server.
  int32 num_clients_reported_and_failed = 6;
}
